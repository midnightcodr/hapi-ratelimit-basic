var redback=require('redback')
	, Hoek=require('hoek')
	, internals={};

internals.default={
	namespace: 'clhr',
	global: {
		x_forwarded_for: true,
		limit: 60,
		duration: 60 
	},
	error: {
		code: 429,
		message: 'Rate limit has been reached'
	}
};

exports.name='hapi-ratelimit-basic';

exports.register=function(plugin, options, next) {
	var settings=Hoek.applyToDefaults(internals.default, options);
	var ratelimit;
	if(options.client) {
		ratelimit=redback.use(options.client).createRateLimit(settings.namespace);
	} else {
		ratelimit=redback.createClient(6379, '127.0.0.1').createRateLimit(settings.namespace);
	}

	var error=plugin.hapi.error.wrap(new Error(), settings.error.code, settings.error.message);
	error.reformat();

	plugin.ext('onPreAuth', function(request, reply) {
		var route = request.route, is_global=false;
		var routeLimit = route.plugins && route.plugins[exports.name];
		if (!routeLimit && settings.global.limit > 0) {
			routeLimit = settings.global;
			is_global=true;
		}

		if(routeLimit) {
			var ip=ratelimit.x_forwarded_for?(request.headers['x-forwarded-for']||request.info.remoteAddress):request.info.remoteAddress;
			var key=ip+(is_global?'':request.path);
			ratelimit.add(key);
			ratelimit.count(key, routeLimit.duration, function(err, requests) {
				if(!err && requests>routeLimit.limit) {
					return reply(error);
				}
				return reply();
			});
		} else {
			return reply();
		}
	});

	return next();
};
	
exports.register.attributes = {
	pkg: require('../package.json')
};	
